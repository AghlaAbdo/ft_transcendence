
🔐 What Is OAuth 2.0?
    OAuth 2.0 is an authorization framework (not authentication by itself) 
    that lets apps access user data without needing their password. Instead, 
    users grant permission via a secure token.

🧭 How Google Uses OAuth 2.0
Google implements OAuth 2.0 to allow apps to:
    * Let users sign in with their Google account
    * Access Google services like Gmail, Calendar, Drive, etc.

🛠️ How It Works (Step-by-Step)
Here’s a simplified flow for a web app:

1- Register Your App
Go to the Google API Console and create a project.
Enable the APIs you want (e.g., Google Calendar).
Create OAuth 2.0 credentials (Client ID and Client Secret).

2- Redirect User to Google
Your app sends the user to Google’s OAuth 2.0 authorization endpoint.
You specify scopes (e.g., email, profile, calendar.readonly) to define what data you want.

3- User Grants Permission
Google shows a consent screen.
If the user agrees, Google redirects back to your app with an authorization code.

4- Exchange Code for Token
Your app sends the code to Google’s token endpoint.
Google responds with an access token (and optionally a refresh token).

5- Access Google APIs
Use the access token to make authorized API requests.
If the token expires, use the refresh token to get a new one.

🔍 Example Use Case
Let’s say you want users to log in to your app using Google:

You request scopes like email and profile.

After login, you get their name, email, and profile picture—without ever seeing their password.

🧠 Pro Tips
    * Use Google’s OAuth libraries for your platform (Node.js, Python, etc.) 
        to simplify implementation.
    * Always store refresh tokens securely.
    * Use incremental authorization—ask for more scopes only when needed.




===========> 
* Use Authorization Code (server-side) so your Fastify backend owns the client secret 
  and handles token exchange. The frontend (Next.js) only triggers a redirect.
* Why: simpler, safer (no secrets in the browser), easy to add more providers.


Fastify backend owns the client secret and handles token exchange. 
The frontend (Next.js) only triggers a redirect.


customerId ;486294240811-833jj3fcpg8023b4rochrbl2atq2ca8m.apps.googleusercontent.com



========> OAuth v1.0 : Browsers only
========> OAuth v2.0 : Browsers, Desktop, Mobile, API



==========> OAuth 2.0 Flow:
1- Authorization Request:
    The client redirects the user to the authorization server (e.g., Google login page).
    The user logs in and grants permission to the client.
2- Authorization Code:
    After the user grants permission, the authorization server 
    redirects the user back to the client with an authorization code.
3- Token Exchange:
    The client sends the authorization code to the authorization server along with 
    its credentials (client ID and secret) to exchange it for an access token.
4- Access Resource:
    The client uses the access token to make requests to the resource server and access the user's data.